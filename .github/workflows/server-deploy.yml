name: Deploy to Server

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_NAME: dikidi_frontend
      DOCKER_IMAGE_TAG: ${{ github.base_ref }}
      DOCKER_IMAGE_LINK: ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
      PROJECT_NAME: dikidi
      SERVER_PATH: ${HOME}/${{ env.PROJECT_NAME }}/${{ github.repository }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    steps:
    - name: Set up Docker-in-Docker
      uses: docker/setup-docker@v1
      with:
        docker-setup: true

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor  }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_LINK }} .
        docker push ${{ env.DOCKER_IMAGE_LINK }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Deploy to server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER }} << 'EOF'
          mkdir -p ${{ env.SERVER_PATH }}/${{ github.repository }}
          cd ${{ env.SERVER_PATH }}/${{ github.repository }}

          curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.base_ref }}/docker-compose.yml
          sed -i 's|image: .*|image: $DOCKER_IMAGE_LINK|' docker-compose.yml
          docker-compose pull
          docker-compose up -d

          # Очистка неиспользуемых Docker-образов
          unused_images=$(docker images -q --filter "dangling=true")
          if [ -n "$unused_images" ]; then
            docker rmi $unused_images
          fi
        EOF
